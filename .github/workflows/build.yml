name: 'Build and Release'

on:
  push:
    tags:
      - 'v*' # 当推送 v* 标签时触发
  workflow_dispatch: # 允许手动触发

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    permissions:
      contents: write # 允许创建和上传到 Release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # Intel Mac
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'macos-latest' # Apple Silicon Mac
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'ubuntu-20.04' # Linux
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest' # Windows
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libxdo-dev libxcb1-dev libxrandr-dev libdbus-1-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # 使用推送的标签作为发布标签
          releaseName: 'BongoCat Next ${{ github.ref_name }}' # 发布名称
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true # 创建草稿发布，你可以手动编辑后发布
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          args: ${{ matrix.args }}

  # 可选：构建完成后的清理任务
  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup
        run: echo "Build process completed" 
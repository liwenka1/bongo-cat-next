"use client";

import type { TrayIconOptions } from "@tauri-apps/api/tray";

import { getName, getVersion } from "@tauri-apps/api/app";
import { Menu, MenuItem, PredefinedMenuItem } from "@tauri-apps/api/menu";
import { resolveResource } from "@tauri-apps/api/path";
import { TrayIcon } from "@tauri-apps/api/tray";
import { openUrl } from "@tauri-apps/plugin-opener";
import { exit, relaunch } from "@tauri-apps/plugin-process";
import { useCatStore } from "@/stores/cat-store";
import { useEffect, useRef } from "react";

const TRAY_ID = "BONGO_CAT_TRAY";

export function useTray() {
  const { visible, setVisible } = useCatStore();
  const trayRef = useRef<TrayIcon | null>(null);

  const createTray = async () => {
    console.log("üîÑ ÂºÄÂßãÂàõÂª∫Á≥ªÁªüÊâòÁõò...");

    try {
      // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÊâòÁõò
      const existingTray = await TrayIcon.getById(TRAY_ID);
      if (existingTray) {
        console.log("‚ö†Ô∏è ÊâòÁõòÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫");
        trayRef.current = existingTray;
        // Êõ¥Êñ∞Áé∞ÊúâÊâòÁõòÁöÑËèúÂçï
        await updateTrayMenu(existingTray);
        return existingTray;
      }

      console.log("üìù Ëé∑ÂèñÂ∫îÁî®‰ø°ÊÅØ...");
      const appName = await getName();
      const appVersion = await getVersion();

      console.log("üçΩÔ∏è ÂàõÂª∫ËèúÂçïÈ°π...");
      const menu = await getTrayMenu();

      console.log("üñºÔ∏è Ëé∑ÂèñÊâòÁõòÂõæÊ†áË∑ØÂæÑ...");
      const icon = await resolveResource("assets/tray.png");

      console.log("üéØ ÂàõÂª∫ÊâòÁõòÂõæÊ†á...");
      const options: TrayIconOptions = {
        menu,
        icon,
        id: TRAY_ID,
        tooltip: `${appName} v${appVersion}`,
        iconAsTemplate: false,
        menuOnLeftClick: true
      };

      const tray = await TrayIcon.new(options);
      trayRef.current = tray;
      console.log("‚úÖ Á≥ªÁªüÊâòÁõòÂàõÂª∫ÊàêÂäü");
      return tray;
    } catch (error) {
      console.error("‚ùå ÂàõÂª∫Á≥ªÁªüÊâòÁõòÂ§±Ë¥•:", error);
      throw error;
    }
  };

  const updateTrayMenu = async (tray: TrayIcon) => {
    try {
      const menu = await getTrayMenu();
      await tray.setMenu(menu);
      console.log("üîÑ ÊâòÁõòËèúÂçïÂ∑≤Êõ¥Êñ∞");
    } catch (error) {
      console.error("‚ùå Êõ¥Êñ∞ÊâòÁõòËèúÂçïÂ§±Ë¥•:", error);
    }
  };

  const getTrayMenu = async () => {
    const appVersion = await getVersion();

    const items = await Promise.all([
      MenuItem.new({
        text: visible ? "ÈöêËóèÁå´Âí™" : "ÊòæÁ§∫Áå´Âí™",
        action: () => {
          setVisible(!visible);
        }
      }),
      PredefinedMenuItem.new({ item: "Separator" }),
      MenuItem.new({
        text: "ÂºÄÊ∫êÂú∞ÂùÄ",
        action: () => void openUrl("https://github.com/liwenka1/bongo-cat-next")
      }),
      PredefinedMenuItem.new({ item: "Separator" }),
      MenuItem.new({
        text: `ÁâàÊú¨ ${appVersion}`,
        enabled: false
      }),
      MenuItem.new({
        text: "ÈáçÂêØÂ∫îÁî®",
        action: () => void relaunch()
      }),
      MenuItem.new({
        text: "ÈÄÄÂá∫Â∫îÁî®",
        accelerator: process.platform === "darwin" ? "Cmd+Q" : "Ctrl+Q",
        action: () => void exit(0)
      })
    ]);

    return Menu.new({ items });
  };

  // üéØ ÁõëÂê¨ visible Áä∂ÊÄÅÂèòÂåñÔºåËá™Âä®Êõ¥Êñ∞ÊâòÁõòËèúÂçï
  useEffect(() => {
    const updateMenu = async () => {
      if (trayRef.current) {
        await updateTrayMenu(trayRef.current);
      }
    };

    void updateMenu();
  }, [visible]); // ‰æùËµñ visible Áä∂ÊÄÅ

  return {
    createTray
  };
}
